import express from "express";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import User from "../models/User.js";
import { sendOtpEmail } from "../utils/sendOtpEmail.js";
import { generateOtp } from "../utils/generateOpt.js";
import dotenv from "dotenv";
dotenv.config();
const router = express.Router();

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å OTP
router.post("/register", async (req, res) => {
  try {
    console.log("üîπ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω:", req.body);
    const { email, password, fullName, avatarUrl } = req.body;
    console.log("üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:", email);
    let user = await User.findOne({ email });
    if (user) {
      console.log("‚ùå Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
      return res.status(400).json({ message: "Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });
    }
    const otp = generateOtp();
    console.log(`‚úÖ OTP —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${otp} –¥–ª—è ${email}`);

    const hashedPassword = await bcrypt.hash(password, 10);

    user = new User({
      email,
      passwordHash: hashedPassword,
      otp,
      isVerified: false,
      fullName,
      avatarUrl,
    });
    console.log("üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:", user);
    await user.save();
    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î!");

    console.log(`User saved in DB: ${user.email}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—á—Ç—ã
    console.log(`üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º OTP ${otp} –Ω–∞ ${email}`);
    const emailResponse = await sendOtpEmail(email, otp);
    console.log("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω?", emailResponse);

    if (!emailResponse) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ OTP –Ω–∞ email");
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ OTP" });
    }
    console.log("üîπ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É...");
    res.status(200).json({ message: "OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP
router.post("/verify-otp", async (req, res) => {
  try {
    const { otp } = req.body;
    console.log(`üîπ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é OTP: ${otp}`);

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ OTP
    const user = await User.findOne({ otp });

    if (!user) {
      console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π OTP!");
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" });
    }

    if (user.isVerified) {
      console.log("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!");
      return res.status(400).json({ message: "–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.isVerified = true;
    user.otp = null; // –£–¥–∞–ª—è–µ–º OTP –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    await user.save();

    console.log("‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω...");
    const token = jwt.sign({ _id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "30d",
    });

    res.status(200).json({ message: "‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", token });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ OTP:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –í—Ö–æ–¥ (Login)
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    console.log(`üîπ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥: ${email}`);

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    const user = await User.findOne({ email });

    if (!user) {
      console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (!user.isVerified) {
      console.log("‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!");
      return res
        .status(400)
        .json({ message: "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email." });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isValidPassword = await bcrypt.compare(password, user.passwordHash);
    if (!isValidPassword) {
      console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!");
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    // –°–æ–∑–¥–∞—ë–º —Ç–æ–∫–µ–Ω
    console.log("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω...");
    const token = jwt.sign({ _id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "30d",
    });

    res
      .status(200)
      .json({ message: "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!", token, userId: user._id });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

export default router;
